name: 'Dev Workflow'
on:
  push:
    branches:
      - dev
      - ft-ci-pipeline-10
  pull_request:
    branches:
      - dev

jobs:
  infra:
    name: 'Infra - Terraform'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        aws-region: us-east-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.12.28

    - name: Terraform Init
      run: terraform init -backend-config=envs/dev.backend.tf
      working-directory: ./infra

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./infra

    - name: Terraform Plan
      run: terraform plan -var-file="values/dev.tfvars"
      working-directory: ./infra

    - name: Terraform Apply
      run: terraform apply -var-file="values/dev.tfvars" -auto-approve
      working-directory: ./infra

    - name: Terraform Outputs
      id: terraform_outputs
      run: |
        export S3_BUCKET="$(cat envs/prod.backend.tf | grep bucket | cut -d'"' -f 2)"

        echo "export ecr_repository=$(terraform output ecr_repository)" >> terraform.outputs
        echo "ecr_repository_url=$(terraform output ecr_repository_url)" >> terraform.outputs
        
        aws s3 cp terraform.outputs s3://S3_BUCKET/terraform.outputs
      working-directory: ./infra

  backend:
    needs: [infra]
    name: 'Backend - Python'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: us-east-1
    
    - name: Install dependencies
      run: |
        sudo pip install pipenv
        pipenv sync --dev --three
      working-directory: ./backend/
    
    - name: Run tests
      run: pipenv run coverage run --omit="tests/*" --include="app/*" --branch -m unittest discover -s tests/unit -p "*_test.py"
      working-directory: ./backend/
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # - name: Build and Deploy
    #   run: |
    #     echo "${ECR_REPOSITORY}"
    #     echo "${ECR_REPOSITORY_URL}"
    #     docker build -t $ECR_REPOSITORY .
    #     docker build -t $ECR_REPOSITORY:${{ github.sha }} .
    #     docker tag $ECR_REPOSITORY:latest $ECR_REPOSITORY_URL:latest
    #     docker push $ECR_REPOSITORY_URL:latest
    #     docker tag $ECR_REPOSITORY:${{ github.sha }} $ECR_REPOSITORY_URL:${{ github.sha }}
    #     docker push $ECR_REPOSITORY_URL:${{ github.sha }}
    #   working-directory: ./backend/
